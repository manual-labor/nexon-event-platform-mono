services:
  mongo1:
    image: mongo:5.0
    container_name: mongo1
    ports:
      - "27017:27017"
    volumes:
      - mongo_data1:/data/db
    command: ["--replSet", "rs0", "--bind_ip_all"]
    networks:
      - app_network

  mongo2:
    image: mongo:5.0
    container_name: mongo2
    ports:
      - "27018:27017"
    volumes:
      - mongo_data2:/data/db
    command: ["--replSet", "rs0", "--bind_ip_all"]
    networks:
      - app_network

  mongo3:
    image: mongo:5.0
    container_name: mongo3
    ports:
      - "27019:27017"
    volumes:
      - mongo_data3:/data/db
    command: ["--replSet", "rs0", "--bind_ip_all"]
    networks:
      - app_network

  mongo-init:
    build:
      context: .
      dockerfile: ./mongo-init-docker/Dockerfile
    container_name: mongo-init
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    command: >
      bash -c "
        mongosh --host mongo1:27017 --eval \"
          try {
            rs.status();
            print('Replica set already initialized.');
          } catch (e) {
            rs.initiate({
              _id: 'rs0',
              members: [
                { _id: 0, host: 'mongo1:27017' },
                { _id: 1, host: 'mongo2:27017' },
                { _id: 2, host: 'mongo3:27017' }
              ]
            });
            print('Replica set initialized.');
          }
        \"
      "
    networks:
      - app_network
    restart: "no" # Run only once

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network

  auth_service:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
    container_name: auth_service
    ports:
      - ${AUTH_PORT:-3001}:3001
    environment:
      - MONGODB_URI_AUTH=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/authdb?replicaSet=rs0
      - REDIS_HOST=redis
      - REDIS_PORT=6379

    env_file:
      - .env

    depends_on:
      - mongo-init
      - redis
    networks:
      - app_network

  event_service:
    build:
      context: .
      dockerfile: ./apps/event/Dockerfile
    container_name: event_service
    ports:
      - "${EVENT_PORT:-3002}:3002"
    environment:
      - MONGODB_URI_EVENT=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/eventdb?replicaSet=rs0
      - REDIS_HOST=redis
      - REDIS_PORT=6379

    env_file:
      - .env

    depends_on:
      - mongo-init
      - redis
    networks:
      - app_network

  gateway_service:
    build:
      context: .
      dockerfile: ./apps/gateway/Dockerfile
    container_name: gateway_service
    ports:
      - "3000:3000" # Assuming gateway service runs on port 3000
    depends_on:
      - auth_service
      - event_service
    networks:
      - app_network
    environment:
      - PORT=${GATEWAY_PORT:-3000}
      - AUTH_SERVICE_HOST=auth_service
      - AUTH_SERVICE_PORT=${AUTH_PORT:-3001}
      - EVENT_SERVICE_HOST=event_service
      - EVENT_SERVICE_PORT=${EVENT_PORT:-3002}
      - JWT_SECRET=${JWT_SECRET}
    env_file:
      - .env

networks:
  app_network:
    driver: bridge

volumes:
  mongo_data1:
  mongo_data2:
  mongo_data3:
  redis_data:
